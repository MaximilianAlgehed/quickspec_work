1. Here is QuickSpec
    1.1 Here is what it can do now (D0.hs)
        1.1.1 We want to see (The problem)
    1.2 Here is what we get now (D1.hs)

2. Our way of doing it
    2.0 What was wrong with the old way of doing it
        2.0.1 It would give us too many equations
                P x => f y         = g x (1)
                P x and Q y => f y = g x (2)
              The old approach would give us both
              (1) and (2). But as we see (2) follows
              directly from (1). In the spirit of
              QuickSpec2 we don't want to test equations
              that will be pruned away.
    2.1 Type encoding, slide demonstrating how it works
    2.2 Automatic generation, let's look at some more examples (D2.hs, D3.hs)
    2.3 We looked at function encoding too.

3. More advanced topics
    3.1 APL/Sets as lists/maps as lists, conjunction (D4.hs, D5.hs)
        3.1.1 `suchThat` is no longer going to work
        3.1.2 Jonas' work looks promising

    3.2 P compose f
        3.2.1 Lots of redundant predicates:

            -- Functions
            reverse :: [a] -> [a]
            length  :: [a] -> Int

            -- Constants
            0 :: Int
            1 :: Int

            -- Predicates
            (>=)     :: Int -> Int -> Bool 
            isSorted :: (Ord a) => [a] -> [a] -> Bool

            -- some type encoded predicates of size 4
            \xs -> (>=) (length xs) 0              -- Any list
            \xs -> (>=) 0 (length xs)              -- The empty list
            \xs -> isSorted (reverse (reverse xs)) -- isSorted

        3.2.2 We can run QuickSpec twice

4. Future work
    4.1 Implement the ideas for fixing injectivity
    4.2 Implement the ideas for working with P compose f
    4.3 A good algorithm for conjunction generation
