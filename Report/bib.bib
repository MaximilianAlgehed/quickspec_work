@conference{Johansson2014,
    author={Johansson, Moa and Rosén, Dan and Smallbone, Nicholas and Claessen, Koen},
    title={Hipster: Integrating theory exploration in a proof assistant},
    booktitle={Lecture Notes in Computer Science},
    isbn={9783319084336},
    pages={108-122},
    abstract={This paper describes Hipster, a system integrating theory exploration with the proof assistant Isabelle/HOL. Theory exploration is a technique for automatically discovering new interesting lemmas in a given theory development. Hipster can be used in two main modes. The first is exploratory mode, used for automatically generating basic lemmas about a given set of datatypes and functions in a new theory development. The second is proof mode, used in a particular proof attempt, trying to discover the missing lemmas which would allow the current goal to be proved. Hipster's proof mode complements and boosts existing proof automation techniques that rely on automatically selecting existing lemmas, by inventing new lemmas that need induction to be proved. We show example uses of both modes. © 2014 Springer International Publishing.},
    year={2014}
}
@conference{Claessen2010,
    author={Claessen, Koen and Smallbone, Nicholas and Hughes, John},
    title={QuickSpec: Guessing Formal Specifications using Testing},
    booktitle={Lecture Notes in Computer Science. 4th International Conference on Tests and Proofs, TAP 2010, Malaga, 1-2 July 2010},
    isbn={978-3-642-13976-5},
    pages={6-21},
    abstract={We present QuickSpec, a tool that automatically generates algebraic specifications for sets of pure functions. The tool is based on testing, rather than static analysis or theorem proving. The main challenge QuickSpec faces is to keep the number of generated equations to a minimum while maintaining completeness. We demonstrate how QuickSpec can improve one’s understanding of a program module by exploring the laws that are generated using two case studies: a heap library for Haskell and a fixed-point arithmetic library for Erlang.},
    year={2010}
}
@conference{Rosen2015,
    author={Rosén, Dan and Smallbone, Nicholas},
    title={Tip: Tools for inductive provers},
    booktitle={Lecture Notes in Computer Science. 20th International Conference on Logic for Programming, Artificial Intelligence, and Reasoning, LPAR 2015, Suva, Fiji, 24-28 November 2015},
    isbn={978-3-662-48898-0},
    pages={219-232},
    abstract={TIP is a toolbox for users and developers of inductive provers. It consists of a large number of tools which can, for example, simplify an inductive problem, monomorphise it or find counterexamples to it. We are using TIP to help maintain a set of benchmarks for inductive theorem provers, where its main job is to encode aspects of the problem that are not natively supported by the respective provers. TIP makes it easier to write inductive provers, by supplying necessary tools such as lemma discovery which prover authors can simply import into their own prover.},
    year={2015}
}
@conference{Claessen2013,
    author={Claessen, Koen and Rosén, Dan and Johansson, Moa and Smallbone, Nicholas},
    title={Automating Inductive Proofs using Theory Exploration},
    booktitle={24th International Conference on Automated Deduction, Lake Placid, NY, USA, June 9-14, 2013},
    isbn={978-3-642-38573-5},
    pages={392-406},
    abstract={HipSpec is a system for automatically deriving and proving properties about functional programs. It uses a novel approach, combining theory exploration, counterexample testing and inductive theorem proving. HipSpec automatically generates a set of equational theorems about the available recursive functions of a program. These equational properties make up an algebraic specification for the program and can in addition be used as a background theory for proving additional user-stated properties. Experimental results are encouraging: HipSpec compares favourably to other inductive theorem provers and theory exploration systems.},
    year={2013},
    note={15}
}
@book{Iverson1962,
    author={Iverson,K. E.},
    year={1962},
    title={A programming language},
    publisher={John Wiley},
    address={New York},
    language={English}
}
@inproceedings{heras2013,
    title={Proof-pattern recognition and lemma discovery in ACL2},
    author={Heras, J{\'o}nathan and Komendantskaya, Ekaterina and Johansson, Moa and Maclean, Ewen},
    booktitle={Logic for Programming, Artificial Intelligence, and Reasoning},
    pages={389--406},
    year={2013},
    organization={Springer}
}
@incollection{claessen2014generating,
    title={Generating constrained random data with uniform distribution},
    author={Claessen, Koen and Dureg{\aa}rd, Jonas and Pa{\l}ka, Micha{\l} H},
    booktitle={Functional and Logic Programming},
    pages={18--34},
    year={2014},
    publisher={Springer}
}
@incollection{Hughes1995,
    title={The design of a pretty-printing library},
    author={Hughes, John},
    booktitle={Advanced Functional Programming},
    pages={53--96},
    year={1995},
    publisher={Springer}
}
@manual{Buchberger2001,
    author = {B. Buchberger and C. Dupre and T. Jebelean and F. Kriftner and K. Nakagawa and D. Vasaru and W. Windsteiger},
    title = {The THEOREMA Project: A Progress Report},
    abstract = {The Theorema project aims at supporting, within one consistent logic and one coherent software system, the entire mathematical exploration cycle including the phase of proving. In this paper we report on some of the new features of Theorema that have been designed and implemented since the first expository version of Theorema in 1997.},
    text = {B. Buchberger, C. Dupre, T. Jebelean, F. Kriftner, K. Nakagawa, D. Vasaru,
        and W. Windsteiger. The THEOREMA project: A progress report. In M. Kerber and M. Kohlhase, editors, Symbolic Computation and Automated Reasoning, pages 98-113. A. K. Peters, 2001.},
    language = {English},
    pages = {98 - 113},
    year = {2001},
    edition = {0},
    refereed = {0}
}
@article{Johansson2011,
    author={Johansson,Moa and Dixon,Lucas and Bundy,Alan},

    year={2011;2010;},

    title={Conjecture Synthesis for Inductive Theories},

    journal={Journal of Automated Reasoning},

    volume={47},

    number={3},

    pages={251-289},

    isbn={0168-7433},

    language={English}
}

}
@inproceedings{Claessen2000,
    author    = {Koen Claessen and
        John Hughes},
    title     = {QuickCheck: a lightweight tool for random testing of Haskell programs},
    booktitle = {Proceedings of the Fifth {ACM} {SIGPLAN} International Conference
        on Functional Programming {(ICFP} '00), Montreal, Canada, September
            18-21, 2000.},
    pages     = {268--279},
    year      = {2000},
    url       = {http://doi.acm.org/10.1145/351240.351266},
    doi       = {10.1145/351240.351266},
    timestamp = {Tue, 11 Jun 2013 13:51:25 +0200},
    biburl    = {http://dblp2.uni-trier.de/rec/bib/conf/icfp/ClaessenH00},
    bibsource = {dblp computer science bibliography, http://dblp.org}
}

